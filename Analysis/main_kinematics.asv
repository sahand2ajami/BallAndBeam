% Pipeline to process the raw experimental data
clc; clear; close all;
format compact

%% Convert .csv files to .mat format

start = 3; %Starting folder from 3, ignoring '.' and '..' in the directory
num_participants = 19;
stop = start + (num_participants - 1); %final folder depends on the number of participants

% n_phase = 4; % this is the number of experiment phases that the participants had
data_path = 'D:\OneDrive - University of Waterloo\project_BallandBeam\data\project-BallandBeam-data\main_\kinematics';
% This is where each participants' data are stored for this project
cd (data_path)

% This function loops in every participant's folder and makes a .mat copy
% of their .csv data 
% Input: start and stop numbers for looping the participants' folders
% UNCOMMENT THIS LINE FOR THE FIRST TIME USING IT
% folderName = csv2mat(start, stop);

%% Take all .mat files and integrate them in a structure file SubjectData
cd (data_path)
% UNCOMMENT THIS LINE FOR THE FIRST TIME USING IT
SubjectData = struct();
SubjectData = mat2struct(SubjectData, start, stop);

% Get the field names
fieldNames = fieldnames(SubjectData);

% Count the number of which is the number of fields
n_participants = numel(fieldNames);

Metrics = struct();
%% Cleaning the time from the data

%% Ball movement analysis
% Here we see how long did ball stayed on target

% ball_data = struct();
% target_data = struct(); 

% Get the field names
participants_list = fieldnames(SubjectData);

% These need to be checked before the final version of the code. 
% target_boundary = 0.03;
target_boundary = 0.05;
occluder_boundary = 0.05;

%%

% success_duration = 9;
% % This extracts the failed trials from the SubjectData
% for i = 1:size(participants_list, 1)
%     phases = SubjectData.(participants_list{i});
%     phases_list = fieldnames(phases);
%     
%     % This loops in the phases
%     for j = 1:size(phases_list, 1)
%         trials = SubjectData.(participants_list{i}).(phases_list{j});
%         trials_list = fieldnames(trials);
% 
%         % This loops in the trials
%         for k = 1:size(trials_list, 1)
%             timedata = trials.(trials_list{k}).time;
%             duration = timedata.time(end) - timedata.time(1);
%             if duration < success_duration
%                 SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}) = NaN
% %                 SubjectData.(participants_list{i}).(phases_list{j}) = rmfield(SubjectData.(participants_list{i}).(phases_list{j}), trials_list{k})
%             end
%         end
% 
%     end
% end
%%

% variables to calculate mean and std of different metrics.

success_duration = 9;
% This loops in participants
for i = 1:size(participants_list, 1)
    phases = SubjectData.(participants_list{i});
    phases_list = fieldnames(phases);
    
    % This loops in the phases
    for j = 1:size(phases_list, 1)

        if contains(phases_list{j}, "MVC")
            mvc_raw = SubjectData.(participants_list{i}).(phases_list{j}).emg_raw;
        end
         
        if contains(phases_list{j}, "phase")
            trials = SubjectData.(participants_list{i}).(phases_list{j});
            trials_list = fieldnames(trials);

            rms_mean_array = [];
            rms_mav_array = [];
            % This loops in the trials
            for k = 1:size(trials_list, 1)
                 
                % Extract the trajectory of the ball
                ball_trajectory = SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).ball.X;
                
                % Extract the time of each trial
                time_array = SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).time.time;
                time_array = time_array - time_array(1);
                duration = time_array(end);
                
                
                %%% Ball on target overall %%%
                % Calculate the overall time that the ball stayed on the target
                % by checking the difference between the trajctory of the ball
                % and the target
                ball_data = timetable(SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).ball.X, 'VariableNames', {'X'}, 'RowTimes', seconds(time_array));
                target_data = timetable(SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).target.X, 'VariableNames', {'X'}, 'RowTimes', seconds(time_array));
                
    %             difference = ball_data.X - target_data.X;
    %             ball_on_target = ball_data((abs(difference) < threshold), :);
    
                % Extracts the time that the ball was on the target in each
                % trial. If it is less than the success_duration, returns
                % NaN
                if duration > success_duration
                    ball_on_target_time = ball_on_target_time_extractor(ball_data, target_data, target_boundary);
                else
                    ball_on_target_time = NaN;
                end
    
                ball_on_target_time_meanstd_trialwise(k,1) = ball_on_target_time;
                % Save the over all time trial by trial
                Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetTime.Trials.(trials_list{k}) = ball_on_target_time;
    
                %%% Ball on target (behind the occluder version) %%%
                % Calculate the overall time that the ball stayed on the target
                % behind the occluder
                % by checking the difference between the trajctory of the ball
                % and the target behind the occluder
                occluder_data = timetable(SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).occluder.X, 'VariableNames', {'X'}, 'RowTimes', seconds(time_array));
                occluder_data = mean(occluder_data.X);
    
                difference = ball_data.X - target_data.X;
                
                if i == 3 && j == 4 && k == 50
                    f = figure;
                    f.Position(2) = 100;
                    subplot(3, 1, 1)
                    plot(target_data.X)
                    hold on
                    x = ball_data.X
                    plot(ball_data.X)
                    subplot(3, 1, 2)
                    plot(abs(difference))
                    subplot(3, 1, 3)
                    x_dddot = diff(ball_data.X, 3);
                    plot(ball_data.X)

%                     msj = kinematic_jerk_ball(x)
%                     smooth_jerk_metric(i, j, k) = kinematic_jerk_ball(ball_data.X);
                end

                zero_crossing(i, j, k) = kinematics_zero_crossing_counter(difference);
                [max_correlation(i, j, k), max_lag(i, j, k)] = kinematic_correlation_calculator(target_data.X, ball_data.X);
                smooth_metric(i, j, k) = kinematic_smoothness_ball(ball_data.X);
%                 smooth_jerk_metric(i, j, k) = kinematic_jerk_ball(ball_data.X);

                [abs_error, rms_error, max_abs_error] = error_calculator(target_data.X,ball_data.X);
                Metrics.(phases_list{j}).(participants_list{i}).abs_error_mean.Trials.(trials_list{k}) = abs_error;
                Metrics.(phases_list{j}).(participants_list{i}).rms_error.Trials.(trials_list{k}) = rms_error;
                Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.Trials.(trials_list{k}) = max_abs_error;

                abs_error_trialwise(k, 1) = mean(abs_error);
                rms_error_trialwise(k, 1) = rms_error;
                max_abs_error_trialwise(k, 1) = mean(max_abs_error);

                ball_target_error = abs(difference);
%                 Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.Trials.(trials_list{k}) = 

                ball_on_target = ball_data((abs(difference) < target_boundary), :);
    
    %             target_boundary
                ball_on_target_behind_occluder_time = ball_on_target_behind_occluder_time_extractor(ball_data,target_data, occluder_data, target_boundary, occluder_boundary);
    %             ball_on_target_behindoccluder_time = time_extractor(abs(difference), occluder_data, occluder_boundary)
    %             difference = ball_on_target.X - occluder_data;
    %             ball_on_target_behind_occluder = ball_on_target((abs(difference) < occluder_boundary), :);
    %             if isempty(ball_on_target_behind_occluder)
    %                 ball_on_target_behind_occluder_time = 0;
    %                 ball_on_target_behind_occluder_time_meanstd_trialwise(k, 1) = 0;
    %             else
    %                 ball_on_target_behind_occluder_time = seconds(ball_on_target_behind_occluder.Time(end) - ball_on_target_behind_occluder.Time(1));
                    ball_on_target_behind_occluder_time_meanstd_trialwise(k, 1) = ball_on_target_behind_occluder_time;
    %             end
    
                % Save the over all time trial by trial
                Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.Trials.(trials_list{k}) = ball_on_target_behind_occluder_time;
            
                %%% Smoothness metric %%%
                % Extract the hand trajectories
                left_hand = SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).left_hand;
                right_hand = SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).right_hand;
                
                % Save the trajectory into time tables
                left_hand_timetable = timetable(left_hand.X, left_hand.Y, left_hand.Z, 'VariableNames', {'X', 'Y', 'Z'}, 'RowTimes', seconds(time_array));
                right_hand_timetable = timetable(right_hand.X, right_hand.Y, right_hand.Z, 'VariableNames', {'X', 'Y', 'Z'}, 'RowTimes', seconds(time_array));
                
                % Save the trajectories into Metrics variable
                Metrics.(phases_list{j}).(participants_list{i}).LeftHand.Trials.(trials_list{k}) = left_hand_timetable;
                Metrics.(phases_list{j}).(participants_list{i}).RightHand.Trials.(trials_list{k}) = right_hand_timetable;
                
                % Analyze the left hand trajectory and extract speed and jerk
                % metrics for smoothness
                [jerk_metric_left, speed_metric_left] = traj_analysis(left_hand_timetable);
                
                % Save the left hand smoothness metrics into Metrics variable
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.left.Trials.(trials_list{k}) = jerk_metric_left;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.left.Trials.(trials_list{k}) = speed_metric_left;
                
                % Append the left hand smoothness metrics into _meanstd
                % variable which is used later to calculate the mean and std of
                % each participant over their trials
                jerk_metric_left_meanstd_trialwise(k,1) = jerk_metric_left;
                speed_metric_left_meanstd_trialwise(k,1) = speed_metric_left;
                
                % Analyze the right hand trajectory and extract speed and jerk
                % metrics for smoothness
                [jerk_metric_right, speed_metric_right] = traj_analysis(right_hand_timetable);
    
                % Save the right hand smoothness metrics into Metrics variable
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.right.Trials.(trials_list{k}) = jerk_metric_right;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.right.Trials.(trials_list{k}) = speed_metric_right;
                
                % Append the right hand smoothness into _meanstd variable which
                % is used later to calculate the mean and std of each
                % participant over their trials
                jerk_metric_right_meanstd_trialwise(k,1) = jerk_metric_right;
                speed_metric_right_meanstd_trialwise(k,1) = speed_metric_right;
    
                % Combine the two hands smoothness metrics by calculating
                % different means
                [arithmetic_mean, geometric_mean, rms, harmonic_mean, vector_sum] ...
                    = smoothness_combinator(jerk_metric_left, jerk_metric_right);
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.combined.arithmetic_mean.Trials.(trials_list{k}) = arithmetic_mean;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.combined.geometric_mean.Trials.(trials_list{k}) = geometric_mean;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.combined.rms.Trials.(trials_list{k}) = rms;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.combined.harmonic.Trials.(trials_list{k}) = harmonic_mean;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.combined.vector_sum.Trials.(trials_list{k}) = vector_sum;
                
                [arithmetic_mean, geometric_mean, rms, harmonic_mean, vector_sum] ...
                    = smoothness_combinator(speed_metric_left, speed_metric_right);
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.combined.arithmetic_mean.Trials.(trials_list{k}) = arithmetic_mean;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.combined.geometric_mean.Trials.(trials_list{k}) = geometric_mean;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.combined.rms.Trials.(trials_list{k}) = rms;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.combined.harmonic.Trials.(trials_list{k}) = harmonic_mean;
                Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.combined.vector_sum.Trials.(trials_list{k}) = vector_sum;

                % Metric: number of failed trials
                Metrics.(phases_list{j}).(participants_list{i}).Fail = SubjectData.(participants_list{i}).(phases_list{j}).('trial51').scores;


                % Include EMG signals here 
                if k > 1
                    trials = SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k});
                    exists = isfield(trials, 'emg_raw');
                    if exists
                        emg_table_raw = SubjectData.(participants_list{i}).(phases_list{j}).(trials_list{k}).emg_raw;
                        mvc_table_raw = SubjectData.(participants_list{i}).MVC.emg_raw;
                        
                        emg_table_preprocessed = table();
                        emg_table_rms = table();
                        emg_table_mav = table();
                        
                        for kk = 1:width(emg_table_raw)
                            emg_preprocessed{:, kk} = emg_preprocess(emg_table_raw{:, kk}, mvc_table_raw{:, kk});
                            emg_name = ['EMG', num2str(kk)];
                            emg_table_preprocessed.(emg_name) = emg_preprocessed{:, kk};
                            
                            [rmsValue{kk}, mavValue{kk}] = emg_metric_calculator(emg_preprocessed{:, kk});
                            emg_table_rms.(emg_name) = rmsValue{kk};
                            emg_table_mav.(emg_name) = mavValue{kk};
                            
                            rms_mean_array(k-1, kk) = rmsValue{kk};
                            mav_mean_array(k-1, kk) = mavValue{kk};
                        end
                        EMG_data.(participants_list{i}).(phases_list{j}).(trials_list{k}).pre_processed = emg_table_preprocessed;
                        EMG_data.(participants_list{i}).(phases_list{j}).(trials_list{k}).rms = emg_table_rms;
                        EMG_data.(participants_list{i}).(phases_list{j}).(trials_list{k}).mav = emg_table_mav;
                    end
                end
            end

            if exists 
                Metrics.(phases_list{j}).(participants_list{i}).EMG.RMS.array = rms_mean_array;
                Metrics.(phases_list{j}).(participants_list{i}).EMG.RMS.mean_over_trials = mean(rms_mean_array);
                Metrics.(phases_list{j}).(participants_list{i}).EMG.RMS.std_over_trials = std(rms_mean_array);
            
                Metrics.(phases_list{j}).(participants_list{i}).EMG.MAV.array = mav_mean_array;
                Metrics.(phases_list{j}).(participants_list{i}).EMG.MAV.mean_over_trials = mean(mav_mean_array);
                Metrics.(phases_list{j}).(participants_list{i}).EMG.MAV.std_over_trials = std(mav_mean_array);
            end
            
            %%% Save the mean and std of over the trials from each participant
            % The time that ball stays on the target
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetTime.arrayovertrials = ball_on_target_time_meanstd_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetTime.mean = nanmean(ball_on_target_time_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetTime.std = nanstd(ball_on_target_time_meanstd_trialwise);
    
            % Absolute Error between the target and the ball position
            Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials = (abs_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).abs_error.mean = nanmean(abs_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).abs_error.std = nanstd(abs_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).abs_error.median = nanmedian(abs_error_trialwise);

            % RMS Error between the target and the ball position
            Metrics.(phases_list{j}).(participants_list{i}).rms_error.arrayovertrials = rms_error_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).rms_error.mean = nanmean(rms_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).rms_error.std = nanstd(rms_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).rms_error.median = nanmedian(rms_error_trialwise);

            % Maximum Absolute Error between the target and the ball position
            Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.arrayovertrials = (max_abs_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.mean = nanmean(max_abs_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.std = nanstd(max_abs_error_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.median = nanmedian(max_abs_error_trialwise);

            % The time that ball stays on the target while behind the occluder
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.arrayovertrials = ball_on_target_behind_occluder_time_meanstd_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.mean = nanmean(ball_on_target_behind_occluder_time_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.std = nanstd(ball_on_target_behind_occluder_time_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.median = nanmedian(ball_on_target_behind_occluder_time_meanstd_trialwise);
            
            % jerk metric of the left hand
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.left.arrayovertrials = jerk_metric_left_meanstd_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.left.mean = nanmean(jerk_metric_left_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.left.std = nanstd(jerk_metric_left_meanstd_trialwise);
    
            % Jerk metric of the right hand
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.right.arrayovertrials = jerk_metric_right_meanstd_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.right.mean = nanmean(jerk_metric_right_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.right.std = nanstd(jerk_metric_right_meanstd_trialwise);
    
            % Speed metric of the left hand
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.left.arrayovertrials = speed_metric_left_meanstd_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.left.mean = nanmean(speed_metric_left_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.left.std = nanstd(speed_metric_left_meanstd_trialwise);
    
            % Speed metric of the right hand
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.right.arrayovertrials = speed_metric_right_meanstd_trialwise;
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.right.mean = nanmean(speed_metric_right_meanstd_trialwise);
            Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.right.std = nanstd(speed_metric_right_meanstd_trialwise);
    
            % Append the mean of each metric into an array so that they can be
            % used in calculation of the mean across participants

            abs_error_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).abs_error.mean;
            rms_error_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).rms_error.mean;
            max_abs_error_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.mean;

            ball_on_target_time_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetTime.mean;
            ball_on_target_behind_occluder_time_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).BallOnTargetBehindOccluderTime.mean;
            jerk_metric_left_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.left.mean;
            jerk_metric_right_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).Smoothness.jerk.right.mean;
            speed_metric_left_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.left.mean;
            speed_metric_right_mean_participantwise(i, j) = Metrics.(phases_list{j}).(participants_list{i}).Smoothness.speed.right.mean;
    
            Metrics_overparticipants.(phases_list{j}).abs_error.array = abs_error_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).abs_error.mean = mean(abs_error_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).abs_error.std = std(abs_error_mean_participantwise(:, j));

            Metrics_overparticipants.(phases_list{j}).rms_error.array = rms_error_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).rms_error.mean = mean(rms_error_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).rms_error.std = std(rms_error_mean_participantwise(:, j));

            Metrics_overparticipants.(phases_list{j}).max_abs_error.array = max_abs_error_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).max_abs_error.mean = mean(max_abs_error_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).max_abs_error.std = std(max_abs_error_mean_participantwise(:, j));

            Metrics_overparticipants.(phases_list{j}).BallOnTargetTime.array = ball_on_target_time_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).BallOnTargetTime.mean = mean(ball_on_target_time_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).BallOnTargetTime.std = std(ball_on_target_time_mean_participantwise(:, j));
    
            Metrics_overparticipants.(phases_list{j}).BallOnTargetBehindOccluderTime.array = ball_on_target_behind_occluder_time_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).BallOnTargetBehindOccluderTime.mean = mean(ball_on_target_behind_occluder_time_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).BallOnTargetBehindOccluderTime.std = std(ball_on_target_behind_occluder_time_mean_participantwise(:, j));
        
            Metrics_overparticipants.(phases_list{j}).Smoothness.jerk.left.array = jerk_metric_left_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).Smoothness.jerk.left.mean = mean(jerk_metric_left_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).Smoothness.jerk.left.std = std(jerk_metric_left_mean_participantwise(:, j));
        
            Metrics_overparticipants.(phases_list{j}).Smoothness.jerk.right.array = jerk_metric_right_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).Smoothness.jerk.right.mean = mean(jerk_metric_right_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).Smoothness.jerk.right.std = std(jerk_metric_right_mean_participantwise(:, j));
        
            Metrics_overparticipants.(phases_list{j}).Smoothness.speed.left.array = speed_metric_left_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).Smoothness.speed.left.mean = mean(speed_metric_left_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).Smoothness.speed.left.std = std(speed_metric_left_mean_participantwise(:, j));
        
            Metrics_overparticipants.(phases_list{j}).Smoothness.speed.right.array = speed_metric_right_mean_participantwise(:, j);
            Metrics_overparticipants.(phases_list{j}).Smoothness.speed.right.mean = mean(speed_metric_right_mean_participantwise(:, j));
            Metrics_overparticipants.(phases_list{j}).Smoothness.speed.right.std = std(speed_metric_right_mean_participantwise(:, j));

            Metrics_overparticipants.(phases_list{j}).Failed_trials(i) = Metrics.(phases_list{j}).(participants_list{i}).Fail;

            FailedTrials(i, j) = Metrics.(phases_list{j}).(participants_list{i}).Fail;
        end
    end
end

%% These are the plots to observe the groups trends
close all
figure
my_boxchart = my_boxplot(Metrics_overparticipants.(phases_list{1}).BallOnTargetTime.array, ...
    Metrics_overparticipants.(phases_list{2}).BallOnTargetTime.array, ...
    Metrics_overparticipants.(phases_list{3}).BallOnTargetTime.array, ...
    Metrics_overparticipants.(phases_list{4}).BallOnTargetTime.array, ...
    55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Time of Ball on the Target");

%%
figure
my_boxchart = my_boxplot(Metrics_overparticipants.(phases_list{1}).BallOnTargetBehindOccluderTime.array, ...
    Metrics_overparticipants.(phases_list{2}).BallOnTargetBehindOccluderTime.array, ...
    Metrics_overparticipants.(phases_list{3}).BallOnTargetBehindOccluderTime.array, ...
    Metrics_overparticipants.(phases_list{4}).BallOnTargetBehindOccluderTime.array, ...
    55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Time of Ball on the Target Behind the Occluder");
%%
% figure
% my_boxchart = my_boxplot(Metrics_overparticipants.(phases_list{1}).Smoothness.speed.left.array(1), ...
%     Metrics_overparticipants.(phases_list{2}).Smoothness.speed.left.array(1), ...
%     Metrics_overparticipants.(phases_list{3}).Smoothness.speed.left.array(1), ...
%     Metrics_overparticipants.(phases_list{4}).Smoothness.speed.left.array(1), ...
%     55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Smoothness speed (Left) - P1");
%     
% figure
% my_boxchart = my_boxplot(Metrics_overparticipants.(phases_list{1}).Smoothness.speed.right.array(1), ...
%     Metrics_overparticipants.(phases_list{2}).Smoothness.speed.right.array(1), ...
%     Metrics_overparticipants.(phases_list{3}).Smoothness.speed.right.array(1), ...
%     Metrics_overparticipants.(phases_list{4}).Smoothness.speed.right.array(1), ...
%     55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Smoothness speed (Right) - P1");
%%
% figure
% my_boxchart = my_boxplot(Metrics_overparticipants.(phases_list{1}).Smoothness.speed.left.array(2), ...
%     Metrics_overparticipants.(phases_list{2}).Smoothness.speed.left.array(2), ...
%     Metrics_overparticipants.(phases_list{3}).Smoothness.speed.left.array(2), ...
%     Metrics_overparticipants.(phases_list{4}).Smoothness.speed.left.array(2), ...
%     55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Smoothness speed (Left) - P2");
%     
figure
my_boxchart = my_boxplot(Metrics_overparticipants.(phases_list{1}).Smoothness.speed.right.array(2), ...
    Metrics_overparticipants.(phases_list{2}).Smoothness.speed.right.array(2), ...
    Metrics_overparticipants.(phases_list{3}).Smoothness.speed.right.array(2), ...
    Metrics_overparticipants.(phases_list{4}).Smoothness.speed.right.array(2), ...
    55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Smoothness speed (Right) - P2");

%%
figure
successTrials = 50 - FailedTrials;
my_boxchart = my_boxplot(successTrials(:, 1), ...
    successTrials(:, 2), ...
    successTrials(:, 3), ...
    successTrials(:, 4), ...
    55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Number of Successful Trials");

%%
close all
figure

plot(Metrics_overparticipants.(phases_list{1}).BallOnTargetTime.array)
hold on
plot(Metrics_overparticipants.(phases_list{2}).BallOnTargetTime.array)
plot(Metrics_overparticipants.(phases_list{3}).BallOnTargetTime.array)
plot(Metrics_overparticipants.(phases_list{4}).BallOnTargetTime.array)
ylim([0, 11])
title("Ball on Target time")
legend("phase1", "phase2", "phase3", "phase4", Location="northoutside")

%%
% close all
figure

plot(Metrics_overparticipants.(phases_list{1}).abs_error.array)
hold on
plot(Metrics_overparticipants.(phases_list{2}).abs_error.array)
plot(Metrics_overparticipants.(phases_list{3}).abs_error.array)
plot(Metrics_overparticipants.(phases_list{4}).abs_error.array)
% ylim([0, 11])
title("Absolute error")
legend("phase1", "phase2", "phase3", "phase4", Location="northoutside", Orientation="horizontal")
ylabel("Error")
xlabel("Participant number")

%%
close all
figure
a = Metrics_overparticipants.(phases_list{2}).rms_error.array(1:9)
b = Metrics_overparticipants.(phases_list{2}).rms_error.array(11:12)
c = Metrics_overparticipants.(phases_list{2}).rms_error.array(14:end)
% plot()
plot([Metrics_overparticipants.(phases_list{1}).rms_error.array(1:6); Metrics_overparticipants.(phases_list{1}).rms_error.array(8:9); Metrics_overparticipants.(phases_list{1}).rms_error.array(11:12); Metrics_overparticipants.(phases_list{1}).rms_error.array(14:end)])
hold on
plot([Metrics_overparticipants.(phases_list{2}).rms_error.array(1:6); Metrics_overparticipants.(phases_list{2}).rms_error.array(8:9); Metrics_overparticipants.(phases_list{2}).rms_error.array(11:12); Metrics_overparticipants.(phases_list{2}).rms_error.array(14:end)])
plot([Metrics_overparticipants.(phases_list{3}).rms_error.array(1:6); Metrics_overparticipants.(phases_list{3}).rms_error.array(8:9); Metrics_overparticipants.(phases_list{3}).rms_error.array(11:12); Metrics_overparticipants.(phases_list{3}).rms_error.array(14:end)])
plot([Metrics_overparticipants.(phases_list{4}).rms_error.array(1:6); Metrics_overparticipants.(phases_list{4}).rms_error.array(8:9); Metrics_overparticipants.(phases_list{4}).rms_error.array(11:12); Metrics_overparticipants.(phases_list{4}).rms_error.array(14:end)])
% ylim([0, 11])
title("RMS error")
legend("phase1", "phase2", "phase3", "phase4", Location="northoutside")

%%

%% Absolute error, Normalized on baseline
close all
clear learning_curve_phasebased
difference_window = 3;
%


learning_curve = [];
for i = 1:size(participants_list, 1)
    phases = SubjectData.(participants_list{i});
    phases_list = fieldnames(phases);
    phases_list = phases_list(~contains(phases_list, "MVC"));
    % This loops in the phases
    for j = 1:size(phases_list, 1)
%         if ~contains(phases_list{j}, "MVC")
            if (i==7 || i==10|| i==13 || i==12)
                learning_curve{i, j} = NaN;
            else
                learning_curve{i, j} = Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.arrayovertrials;
%             learning_curve{i, j} = [Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(1:6); Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(8:9); Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(11:12); Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(14:end)]
            end
            learning_curve{i, j} = movmean(learning_curve{i, j}, difference_window);
%         end
    end
end


% close all

color1 = [0 0.4470 0.7410];
color2 = [0.8500 0.3250 0.0980];
color3 = [0.4660 0.6740 0.1880];
color4 = [0.4940 0.1840 0.5560];

color = [color1; color2; color3; color4];
close all
% figure
for j = 1:size(learning_curve, 2)
    for i = 1:size(learning_curve, 1)
        learning_curve_phasebased(i, :) = learning_curve{i, j}';
    end
    if j==1
        my_title = "NHV";
        y_label = "Normalized Error";
        x_label = "";
    elseif  j==2
        my_title = "H";
        y_label = "";
        x_label = "";
    elseif  j==3
        my_title = "V";
        y_label = "Normalized Error";
        x_label = "Trial number";
    elseif j==4
        my_title = "HV";
        y_label = "";
        x_label = "Trial number";
    end

%     my_title = strcat('phase ', num2str(j));
%     j
% plot(nanmedian(learning_curve_phasebased))
%     mean(learning_curve_phasebased(:, 1:10), 2)
%     learning_curve_plot(learning_curve_phasebased)
%     figure
%     subplot(2, 2, j)
%     y_label = "Normalized Error";
    
% learning_curve_plot(learning_curve_phasebased, my_title, color(j, :), x_label, y_label)
    learning_curve_plot(learning_curve_phasebased ./ nanmean(learning_curve_phasebased(:, 1:10), 2), my_title, color1, x_label, y_label)
%     hold on

    

% learning_curve_plot(learning_curve_phasebased)
end
%%
close all
window = 10;

for i = 1:size(learning_curve, 1)
    learning_curve_phasebased1(i, :) = learning_curve{i, 1}';
    learning_curve_phasebased2(i, :) = learning_curve{i, 2}';
    learning_curve_phasebased3(i, :) = learning_curve{i, 3}';
    learning_curve_phasebased4(i, :) = learning_curve{i, 4}';
end
y1 = learning_curve_phasebased1(:, 1:10) ./ nanmean(learning_curve_phasebased1(:, 1:10), 2);
y1 = nanmean(y1, 1);
y2 = learning_curve_phasebased1(:, end-window+1:end) ./ nanmean(learning_curve_phasebased1(:, 1:10), 2);
y2 = nanmean(y2, 1);
y3 = learning_curve_phasebased2(:, 1:10) ./ nanmean(learning_curve_phasebased2(:, 1:10), 2);
y3 = nanmean(y3, 1);
y4 = learning_curve_phasebased2(:, end-window+1:end) ./ nanmean(learning_curve_phasebased2(:, 1:10), 2);
y4 = nanmean(y4, 1);
y5 = learning_curve_phasebased3(:, 1:10) ./ nanmean(learning_curve_phasebased3(:, 1:10), 2);
y5 = nanmean(y5, 1);
y6 = learning_curve_phasebased3(:, end-window+1:end) ./ nanmean(learning_curve_phasebased3(:, 1:10), 2);
y6 = nanmean(y6, 1);
y7 = learning_curve_phasebased4(:, 1:10) ./ nanmean(learning_curve_phasebased4(:, 1:10), 2);
y7 = nanmean(y7, 1);
y8 = learning_curve_phasebased4(:, end-window+1:end) ./ nanmean(learning_curve_phasebased4(:, 1:10), 2);
y8 = nanmean(y8, 1);
% y2 = nanmean(learning_curve_phasebased1(:, end-10+1:end), 2);
% %     learning_curve_phasebased(i, :) = learning_curve{i, 2}';
%     y3 = nanmean(learning_curve_phasebased2(:, 1:10), 2);
%     y4 = nanmean(learning_curve_phasebased2(:, end-10+1:end), 2);
% %     learning_curve_phasebased(i, :) = learning_curve{i, 3}';
%     y5 = nanmean(learning_curve_phasebased3(:, 1:10), 2);
%     y6 = nanmean(learning_curve_phasebased3(:, end-10+1:end), 2);
% %     learning_curve_phasebased(i, :) = learning_curve{i, 4}';
%     y7 = nanmean(learning_curve_phasebased4(:, 1:10), 2);
%     y8 = nanmean(learning_curve_phasebased4(:, end-10+1:end), 2);
% 
[my_boxchart, x1, x2, x3, x4, x5, x6, x7, x8] = ...
    emg_boxplot(y1, y2, y3, y4, y5, y6, y7, ...
    y8, 5, "linux libertine G", 9, "NHV", "H", ...
    "V", "HV", [0.5, 2], "", "Normalized Error");
StatisticalLines(x3, x4, "***", 1.5, 0.04, 9)
StatisticalLines(x5, x6, "*", 1.5, 0.04, 9)
StatisticalLines(x7, x8, "**", 1.5, 0.04, 9)
StatisticalLines(x2, x8, "**", 1.8, 0.04, 9)
%%
[h, p] = ttest(y6, y8)
%%
my_title = strcat('phase ', num2str(j));

y_label = "Normalized Error";
x_label = "Trial number";
learning_curve_plot(learning_curve_phasebased ./ nanmean(learning_curve_phasebased(:, 1:10), 2), my_title, color(j, :), x_label, y_label)
%%
% [p,tbl,stats] = friedman([y2;y4;y6;y8], 1, "off")
[p, tbl, stats] = anova1([y2;y8]);
%% Max Absolute error, Normalized on baseline
% close all
difference_window = 7;
%
clear learning_curve_phasebased


learning_curve = [];
for i = 1:size(participants_list, 1)
    phases = SubjectData.(participants_list{i});
    phases_list = fieldnames(phases);
    phases_list = phases_list(~contains(phases_list, "MVC"));
    % This loops in the phases
    for j = 1:size(phases_list, 1)
%         if ~contains(phases_list{j}, "MVC")
            if (i==7 || i==10|| i==13)
                learning_curve{i, j} = NaN;
            else
                learning_curve{i, j} = Metrics.(phases_list{j}).(participants_list{i}).max_abs_error.arrayovertrials;
%             learning_curve{i, j} = [Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(1:6); Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(8:9); Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(11:12); Metrics.(phases_list{j}).(participants_list{i}).abs_error.arrayovertrials(14:end)]
            end
            learning_curve{i, j} = movmean(learning_curve{i, j}, difference_window);
%         end
    end
end

close all

color1 = [0 0.4470 0.7410];
color2 = [0.8500 0.3250 0.0980];
color3 = [0.4660 0.6740 0.1880];
color4 = [0.4940 0.1840 0.5560];

color = [color1; color2; color3; color4];

figure
for j = 1:size(learning_curve, 2)
    for i = 1:size(learning_curve, 1)
        learning_curve_phasebased(i, :) = learning_curve{i, j}'
    end
    
    my_title = strcat('phase ', num2str(j));

    subplot(2, 2, j)
    learning_curve_plot(learning_curve_phasebased, my_title, color(j, :), x_label, y_label)

%     learning_curve_plot(learning_curve_phasebased ./ mean(learning_curve_phasebased(:, 1:10), 2), my_title, color(j, :), x_label, y_label)
end


% %% Fit exponential curve into learning curves:
% close all
% % Loops over the phases
% for j = 1:size(learning_curve, 2)
%     % Loops over the participants
%     for i = 1:size(learning_curve, 1)
% %         learning_curve_phasebased(i, :) = learning_curve{i, j}';
% %         for k = 1:size(learning_curve_phasebased, 1)
%             if ~(i==7 || i==10|| i==13)
%                 [fit_result, gof] = fit_curve(movmean(learning_curve{i, j}, difference_window));
% %                 a(i, j) = fit_result.a;
% %                 b(j, j) = fit_result.b;
% 
%                 if (j==2)
%                     figure
%                     plot(movmean(learning_curve{i, j}, difference_window), "*")
%                     hold on
%                     T = [1:length(learning_curve{i, j})] - 1;
%                     a = fit_result.p1
%                     b = fit_result.p2
%                     c = fit_result.p3
%                     d = fit_result.p4
%                     e = fit_result.p5
%                     f = fit_result.p6
%                     plot(T, a.*T.^5 + b.*T.^4 + c.*T.^3 + d.*T.^2 + e.*T.^1 + f)
%                     
% %                     plot(T, fit_result.a .* exp(fit_result.b * T) + fit_result.c)
%                     title(strcat("P", num2str(i), ", phase ", num2str(j)))
%                 end
% 
%             end
% 
%     end
% 
% 
% end
% 
% 
% 
% % for j = 1:size(learning_curve, 2)
% %     for k = 1:size(learning_curve_phasebased, 1)
% %         if ~(k==7 || k==10|| k==13)
% % %         if ~isnan(learning_curve_phasebased)
% %             [fit_result, gof] = fit_curve(learning_curve_phasebased(k, :));
% %             a(k, j) = fit_result.a
% %             b(k, j) = fit_result.b
% % %         else
% % %             disp("kir")
% %         end
% %     end
% %     
% %  
% % end
%%
% 
% initial_slope = b;
% %%
% [cleaned_slope] = outlier_cleaner(initial_slope);
% 
% figure
% my_boxchart = my_boxplot((cleaned_slope(:, 1)), ...
%     (cleaned_slope(:, 2)), ...
%     (cleaned_slope(:, 3)), ...
%     (cleaned_slope(:, 4)), ...
%     55, 'Linux Libertine G', 9, 'phase 1', 'phase 2', 'phase 3', 'phase 4', [0, 0.5], "Learning curve slope");

%%
% [h,p] = ttest(cleaned_slope(:, 2), cleaned_slope(:, 4))
%% Not Normalized
close all
for j = 1:size(learning_curve, 2)
    for i = 1:size(learning_curve, 1)
        learning_curve_phasebased(i, :) = learning_curve{i, j}'
    end
    figure
    my_title = strcat('phase ', num2str(j));
    x_label = "Trial number";
    y_label = "Normalized Error";
%     j
% plot(nanmedian(learning_curve_phasebased))
%     mean(learning_curve_phasebased(:, 1:10), 2)
%     learning_curve_plot(learning_curve_phasebased)
%     learning_curve_plot(signal, my_title, x_label, y_label)

    learning_curve_plot(learning_curve_phasebased, my_title,color(j, :), x_label, y_label)
% learning_curve_plot(learning_curve_phasebased)
end

%% PARTICIPANTS OVER 200 TRIALS:

close all
% P1
subplot(4,5,1)
first = Metrics.phase3.S_01.abs_error.arrayovertrials;
second = Metrics.phase1.S_01.abs_error.arrayovertrials;
third = Metrics.phase2.S_01.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_01.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P1")
%
% P2
subplot(4,5,2)
first = Metrics.phase2.S_02.abs_error.arrayovertrials;
second = Metrics.phase3.S_02.abs_error.arrayovertrials;
third = Metrics.phase4.S_02.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_02.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P2")
%
% P3
subplot(4,5,3)
first = Metrics.phase3.S_03.abs_error.arrayovertrials;
second = Metrics.phase1.S_03.abs_error.arrayovertrials;
third = Metrics.phase2.S_03.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_03.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P3")
%
% P4
subplot(4,5,4)
first = Metrics.phase4.S_04.abs_error.arrayovertrials;
second = Metrics.phase2.S_04.abs_error.arrayovertrials;
third = Metrics.phase3.S_04.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_04.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P4")
%
% P5
subplot(4,5,5)
first = Metrics.phase1.S_05.abs_error.arrayovertrials;
second = Metrics.phase3.S_05.abs_error.arrayovertrials;
third = Metrics.phase2.S_05.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_05.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P5")
%
% P6
subplot(4,5,6)
first = Metrics.phase2.S_06.abs_error.arrayovertrials;
second = Metrics.phase1.S_06.abs_error.arrayovertrials;
third = Metrics.phase3.S_06.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_06.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P6")

%
% P7
subplot(4,5,7)
first = Metrics.phase4.S_07.abs_error.arrayovertrials;
second = Metrics.phase1.S_07.abs_error.arrayovertrials;
third = Metrics.phase3.S_07.abs_error.arrayovertrials;
fourth = Metrics.phase2.S_07.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P7")

%
% P8
subplot(4,5,8)
first = Metrics.phase4.S_08.abs_error.arrayovertrials;
second = Metrics.phase2.S_08.abs_error.arrayovertrials;
third = Metrics.phase1.S_08.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_08.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P8")

%
% P9
subplot(4,5,9)
first = Metrics.phase2.S_09.abs_error.arrayovertrials;
second = Metrics.phase3.S_09.abs_error.arrayovertrials;
third = Metrics.phase1.S_09.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_09.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P9")

%
% P10
subplot(4,5,10)
first = Metrics.phase4.S_10.abs_error.arrayovertrials;
second = Metrics.phase2.S_10.abs_error.arrayovertrials;
third = Metrics.phase1.S_10.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_10.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P10")

%
% P11
subplot(4,5,11)
first = Metrics.phase2.S_11.abs_error.arrayovertrials;
second = Metrics.phase1.S_11.abs_error.arrayovertrials;
third = Metrics.phase3.S_11.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_11.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P11")

%
% P12
subplot(4,5,12)
first = Metrics.phase1.S_12.abs_error.arrayovertrials;
second = Metrics.phase3.S_12.abs_error.arrayovertrials;
third = Metrics.phase2.S_12.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_12.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P12")
% 
% %
% P13
subplot(4,5,13)
first = Metrics.phase3.S_13.abs_error.arrayovertrials;
second = Metrics.phase4.S_13.abs_error.arrayovertrials;
third = Metrics.phase1.S_13.abs_error.arrayovertrials;
fourth = Metrics.phase2.S_13.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P13")

%
% P14
subplot(4,5,14)
first = Metrics.phase3.S_14.abs_error.arrayovertrials;
second = Metrics.phase2.S_14.abs_error.arrayovertrials;
third = Metrics.phase4.S_14.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_14.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P14")

%
% P15
subplot(4,5,15)
first = Metrics.phase4.S_15.abs_error.arrayovertrials;
second = Metrics.phase2.S_15.abs_error.arrayovertrials;
third = Metrics.phase3.S_15.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_15.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P15")

%
% P16
subplot(4,5,16)
first = Metrics.phase4.S_16.abs_error.arrayovertrials;
second = Metrics.phase3.S_16.abs_error.arrayovertrials;
third = Metrics.phase1.S_16.abs_error.arrayovertrials;
fourth = Metrics.phase2.S_16.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P16")

%
% P17
subplot(4,5,17)
first = Metrics.phase2.S_17.abs_error.arrayovertrials;
second = Metrics.phase3.S_17.abs_error.arrayovertrials;
third = Metrics.phase4.S_17.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_17.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P17")

%
% P18
subplot(4,5,18)
first = Metrics.phase1.S_18.abs_error.arrayovertrials;
second = Metrics.phase4.S_18.abs_error.arrayovertrials;
third = Metrics.phase2.S_18.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_18.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P18")

%
% P19
subplot(4,5,19)
first = Metrics.phase2.S_19.abs_error.arrayovertrials;
second = Metrics.phase4.S_19.abs_error.arrayovertrials;
third = Metrics.phase1.S_19.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_19.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P19")

%%
close all
%%%%%% first exposure: C1
% P5
subplot(4,6,1)
first = Metrics.phase1.S_05.abs_error.arrayovertrials;
second = Metrics.phase3.S_05.abs_error.arrayovertrials;
third = Metrics.phase2.S_05.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_05.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P5")

% P18
subplot(4,6,2)
first = Metrics.phase1.S_18.abs_error.arrayovertrials;
second = Metrics.phase4.S_18.abs_error.arrayovertrials;
third = Metrics.phase2.S_18.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_18.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P18")

%%%%%% first exposure: C2
% P2
subplot(4,6,7)
first = Metrics.phase2.S_02.abs_error.arrayovertrials;
second = Metrics.phase3.S_02.abs_error.arrayovertrials;
third = Metrics.phase4.S_02.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_02.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P2")

% P6
subplot(4,6,8)
first = Metrics.phase2.S_06.abs_error.arrayovertrials;
second = Metrics.phase1.S_06.abs_error.arrayovertrials;
third = Metrics.phase3.S_06.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_06.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P6")

% P9
subplot(4,6,9)
first = Metrics.phase2.S_09.abs_error.arrayovertrials;
second = Metrics.phase3.S_09.abs_error.arrayovertrials;
third = Metrics.phase1.S_09.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_09.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P9")

% P11
subplot(4,6,10)
first = Metrics.phase2.S_11.abs_error.arrayovertrials;
second = Metrics.phase1.S_11.abs_error.arrayovertrials;
third = Metrics.phase3.S_11.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_11.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P11")

% P17
subplot(4,6,11)
first = Metrics.phase2.S_17.abs_error.arrayovertrials;
second = Metrics.phase3.S_17.abs_error.arrayovertrials;
third = Metrics.phase4.S_17.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_17.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P17")

% P19
subplot(4,6,12)
first = Metrics.phase2.S_19.abs_error.arrayovertrials;
second = Metrics.phase4.S_19.abs_error.arrayovertrials;
third = Metrics.phase1.S_19.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_19.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P19")

%%%%%% first exposure: C3
% P3
subplot(4,6,13)
first = Metrics.phase3.S_03.abs_error.arrayovertrials;
second = Metrics.phase1.S_03.abs_error.arrayovertrials;
third = Metrics.phase2.S_03.abs_error.arrayovertrials;
fourth = Metrics.phase4.S_03.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P3")

% P13
subplot(4,6,14)
first = Metrics.phase3.S_14.abs_error.arrayovertrials;
second = Metrics.phase2.S_14.abs_error.arrayovertrials;
third = Metrics.phase4.S_14.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_14.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P14")

%%%%%% first exposure: C4
%P4
subplot(4,6,19)
first = Metrics.phase4.S_04.abs_error.arrayovertrials;
second = Metrics.phase2.S_04.abs_error.arrayovertrials;
third = Metrics.phase3.S_04.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_04.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P4")
% 
% %P7
% subplot(4,6,20)
% first = Metrics.phase3.S_07.abs_error.arrayovertrials;
% second = Metrics.phase1.S_07.abs_error.arrayovertrials;
% third = Metrics.phase2.S_07.abs_error.arrayovertrials;
% fourth = Metrics.phase4.S_07.abs_error.arrayovertrials;
% 
% overall_plot_participantwise(first,second, third, fourth, "P7")
%P8
subplot(4,6,20)
first = Metrics.phase4.S_08.abs_error.arrayovertrials;
second = Metrics.phase2.S_08.abs_error.arrayovertrials;
third = Metrics.phase1.S_08.abs_error.arrayovertrials;
fourth = Metrics.phase3.S_08.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P8")

%P15
subplot(4,6,21)
first = Metrics.phase4.S_15.abs_error.arrayovertrials;
second = Metrics.phase2.S_15.abs_error.arrayovertrials;
third = Metrics.phase3.S_15.abs_error.arrayovertrials;
fourth = Metrics.phase1.S_15.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P15")

%P16
subplot(4,6,22)
first = Metrics.phase4.S_16.abs_error.arrayovertrials;
second = Metrics.phase3.S_16.abs_error.arrayovertrials;
third = Metrics.phase1.S_16.abs_error.arrayovertrials;
fourth = Metrics.phase2.S_16.abs_error.arrayovertrials;

overall_plot_participantwise(first,second, third, fourth, "P16")


%% Putting Mean absolute error into a structure

MeanAbsError = struct();

MeanAbsErrorFeatures.P1.first = Metrics.phase3.S_01.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P1.second = Metrics.phase1.S_01.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P1.third = Metrics.phase2.S_01.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P1.fourth = Metrics.phase4.S_01.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P2.first = Metrics.phase2.S_02.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P2.second = Metrics.phase3.S_02.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P2.third = Metrics.phase1.S_02.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P2.fourth = Metrics.phase4.S_02.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P3.first = Metrics.phase3.S_03.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P3.second = Metrics.phase1.S_03.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P3.third = Metrics.phase2.S_03.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P3.fourth = Metrics.phase4.S_03.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P4.first = Metrics.phase4.S_04.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P4.second = Metrics.phase2.S_04.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P4.third = Metrics.phase3.S_04.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P4.fourth = Metrics.phase1.S_04.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P5.first = Metrics.phase1.S_05.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P5.second = Metrics.phase3.S_05.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P5.third = Metrics.phase2.S_05.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P5.fourth = Metrics.phase4.S_05.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P6.first = Metrics.phase2.S_06.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P6.second = Metrics.phase1.S_06.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P6.third = Metrics.phase3.S_06.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P6.fourth = Metrics.phase4.S_06.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P7.first = Metrics.phase4.S_07.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P7.second = Metrics.phase1.S_07.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P7.third = Metrics.phase3.S_07.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P7.fourth = Metrics.phase2.S_07.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P8.first = Metrics.phase4.S_08.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P8.second = Metrics.phase2.S_08.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P8.third = Metrics.phase1.S_08.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P8.fourth = Metrics.phase3.S_08.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P9.first = Metrics.phase2.S_09.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P9.second = Metrics.phase3.S_09.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P9.third = Metrics.phase1.S_09.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P9.fourth = Metrics.phase4.S_09.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P10.first = Metrics.phase4.S_10.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P10.second = Metrics.phase2.S_10.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P10.third = Metrics.phase1.S_10.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P10.fourth = Metrics.phase3.S_10.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P11.first = Metrics.phase2.S_11.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P11.second = Metrics.phase1.S_11.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P11.third = Metrics.phase3.S_11.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P11.fourth = Metrics.phase4.S_11.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P12.first = Metrics.phase1.S_12.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P12.second = Metrics.phase3.S_12.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P12.third = Metrics.phase2.S_12.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P12.fourth = Metrics.phase4.S_12.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P13.first = Metrics.phase3.S_13.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P13.second = Metrics.phase4.S_13.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P13.third = Metrics.phase1.S_13.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P13.fourth = Metrics.phase2.S_13.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P14.first = Metrics.phase3.S_14.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P14.second = Metrics.phase2.S_14.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P14.third = Metrics.phase4.S_14.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P14.fourth = Metrics.phase1.S_14.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P15.first = Metrics.phase4.S_15.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P15.second = Metrics.phase2.S_15.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P15.third = Metrics.phase3.S_15.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P15.fourth = Metrics.phase1.S_15.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P16.first = Metrics.phase4.S_16.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P16.second = Metrics.phase3.S_16.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P16.third = Metrics.phase1.S_16.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P16.fourth = Metrics.phase2.S_16.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P17.first = Metrics.phase2.S_17.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P17.second = Metrics.phase3.S_17.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P17.third = Metrics.phase4.S_17.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P17.fourth = Metrics.phase1.S_17.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P18.first = Metrics.phase1.S_18.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P18.second = Metrics.phase4.S_18.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P18.third = Metrics.phase2.S_18.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P18.fourth = Metrics.phase3.S_18.abs_error.arrayovertrials;

MeanAbsErrorFeatures.P19.first = Metrics.phase2.S_19.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P19.second = Metrics.phase4.S_19.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P19.third = Metrics.phase1.S_19.abs_error.arrayovertrials;
MeanAbsErrorFeatures.P19.fourth = Metrics.phase3.S_19.abs_error.arrayovertrials;

% Smooth the mean absolute error
difference_window = 11;
participant_list = fieldnames(MeanAbsErrorFeatures);
for i = 1:length(participant_list)
    trial_orders = fieldnames(MeanAbsErrorFeatures.(participant_list{i}));
    for j = 1:length(trial_orders)
        MeanAbsErrorFeatures.(participant_list{i}).(trial_orders{j}) = ...
            movmean(MeanAbsErrorFeatures.(participant_list{i}).(trial_orders{j}), difference_window);
    end
end
%% Extracting features from mean absolute error

baseline_trials_num = 3;
test_trials_num = 3; 
difference_window = 5;
slope_window = 25;
clear base_baseline trials_ordered difference_12 difference_23 difference_34
clear initial_slope baseline_trials test_trials initial_trials_for_slope
participant_list = fieldnames(MeanAbsErrorFeatures);
exclude_list = [7, 10, 12, 13];

for i = 1:length(participant_list)
    % Check if the current participant should be excluded
    if ismember(i, exclude_list)
        continue; % Skip the rest of the loop for this participant
    end

    trials = fieldnames(MeanAbsErrorFeatures.(participant_list{i}));
    for j = 1:length(trials)
        trials_ordered{i, j} = MeanAbsErrorFeatures.(participant_list{i}).(trial_orders{j});
        baseline_trials{i, j} = trials_ordered{i, j}(1:baseline_trials_num, :);
        test_trials{i, j} = trials_ordered{i, j}((end-test_trials_num+1:end), :);
        initial_trials_for_slope{i, j} = trials_ordered{i, j}(1:slope_window, :);
        final_trials_for_slope{i, j} = trials_ordered{i, j}(end-slope_window+1:end, :);
        initial_slope{i, j} = slope_calculator(initial_trials_for_slope{i, j});
        final_slope{i, j} = slope_calculator(final_trials_for_slope{i, j});
    end

    difference_12(i, 1) = -mean(trials_ordered{i, 1}((end-difference_window+1:end), :)) + mean(trials_ordered{i, 2}((1:difference_window), :));
    difference_23(i, 1) = -mean(trials_ordered{i, 2}((end-difference_window+1:end), :)) + mean(trials_ordered{i, 3}((1:difference_window), :));
    difference_34(i, 1) = -mean(trials_ordered{i, 3}((end-difference_window+1:end), :)) + mean(trials_ordered{i, 4}((1:difference_window), :));
end
 
%% Initial Slope
close all

% Participants with one phase 1 as their first phase
y1 = cell2mat(initial_slope(:, 1));
y2 = cell2mat(initial_slope(:, 2));
y3 = cell2mat(initial_slope(:, 3));
y4 = cell2mat(initial_slope(:, 4));

[my_boxchart, x1, x2, x3, x4] = box_plot_questionnaire(y1, y2, y3, y4, ...
    5, 'Linux Libertine G', 9, 'First', 'Second', 'Third', 'Fourth', [-.005, 0.005], "", "Initial Slope");

%% Initial vs. final Slope
close all

% Participants with one phase 1 as their first phase
y1 = cell2mat(initial_slope(:, 1));
y2 = cell2mat(initial_slope(:, 2));
y3 = cell2mat(initial_slope(:, 3));
y4 = cell2mat(initial_slope(:, 4));
y5 = cell2mat(final_slope(:, 1));
y6 = cell2mat(final_slope(:, 2));
y7 = cell2mat(final_slope(:, 3));
y8 = cell2mat(final_slope(:, 4));

[my_boxchart, x1, x2, x3, x4, x5, x6, x7, x8] = ...
    emg_boxplot(y1, y2, y3, y4, y5, y6, y7, ...
    y8, 5, "linux libertine G", 9, "First", "Second", ...
    "Third", "Fourth", [-.005, 0.003], "", "Slope");

StatisticalLines(x1, x2, "*", 2.2e-3, .2e-3, 9)
[h, p] = ttest(y1, y2)

%%
close all
% Participants with one phase 2 as their first phase
y1 = cell2mat(initial_slope(:, 1));
y2 = cell2mat(initial_slope(:, 2));
y3 = cell2mat(initial_slope(:, 3));
y4 = cell2mat(initial_slope(:, 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");

plot([x1([2, 6, 8, 9, 13, 15])', x2([2, 6, 8, 9, 13, 15])', x3([2, 6, 8, 9, 13, 15])',x4([2, 6, 8, 9, 13, 15])']', [y1([2, 6, 8, 9, 13, 15]), y2([2, 6, 8, 9, 13, 15]), y3([2, 6, 8, 9, 13, 15]), y4([2, 6, 8, 9, 13, 15])]', 'b', LineWidth=2)
hold on

%%
close all
% Participants with one phase 3 as their first phase
y1 = cell2mat(initial_slope(:, 1));
y2 = cell2mat(initial_slope(:, 2));
y3 = cell2mat(initial_slope(:, 3));
y4 = cell2mat(initial_slope(:, 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");

plot([x1([3, 10])', x2([3, 10])', x3([3, 10])',x4([3, 10])']', [y1([3, 10]), y2([3, 10]), y3([3, 10]), y4([3, 10])]', 'b', LineWidth=2)
hold on

%% 
close all
% Participants with one phase 4 as their first phase
y1 = cell2mat(initial_slope(:, 1));
y2 = cell2mat(initial_slope(:, 2));
y3 = cell2mat(initial_slope(:, 3));
y4 = cell2mat(initial_slope(:, 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");

plot([x1([4, 7, 11, 12])', x2([4, 7, 11, 12])', x3([4, 7, 11, 12])',x4([4, 7, 11, 12])']', [y1([4, 7, 11, 12]), y2([4, 7, 11, 12]), y3([4, 7, 11, 12]), y4([4, 7, 11, 12])]', 'b', LineWidth=2)
hold on

% plot([x1([5, 8])', x2([5, 8])']', [y1([5, 8]), y2([5, 8])]', 'b')
% plot()
% ttest between the first and the second conditions shows that the learning
% is happening during the first [slope_window] trials of the first condition
[h, p] = ttest(y1, y2)

%%
close all
figure
y1 = cell2mat(initial_slope([5, 18], 1));
y2 = cell2mat(initial_slope([5, 18], 2));
y3 = cell2mat(initial_slope([5, 18], 3));
y4 = cell2mat(initial_slope([5, 18], 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");
hold on
% plot([x1([5, 14])', x2([5, 14])', x3([5, 14])',x4([5, 14])']', [y1([5, 14]), y2([5, 14]), y3([5, 14]), y4([5, 14])]', 'b', LineWidth=2)


figure
y1 = cell2mat(initial_slope([2, 6, 9, 11, 17, 19], 1));
y2 = cell2mat(initial_slope([2, 6, 9, 11, 17, 19], 2));
y3 = cell2mat(initial_slope([2, 6, 9, 11, 17, 19], 3));
y4 = cell2mat(initial_slope([2, 6, 9, 11, 17, 19], 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");
% plot([x1([2, 6, 8, 9, 13, 15])', x2([2, 6, 8, 9, 13, 15])', x3([2, 6, 8, 9, 13, 15])',x4([2, 6, 8, 9, 13, 15])']', [y1([2, 6, 8, 9, 13, 15]), y2([2, 6, 8, 9, 13, 15]), y3([2, 6, 8, 9, 13, 15]), y4([2, 6, 8, 9, 13, 15])]', 'b', LineWidth=2)


figure
y1 = cell2mat(initial_slope([3, 14], 1));
y2 = cell2mat(initial_slope([3, 14], 2));
y3 = cell2mat(initial_slope([3, 14], 3));
y4 = cell2mat(initial_slope([3, 14], 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");
% plot([x1([3, 10])', x2([3, 10])', x3([3, 10])',x4([3, 10])']', [y1([3, 10]), y2([3, 10]), y3([3, 10]), y4([3, 10])]', 'b', LineWidth=2)
hold on

figure
y1 = cell2mat(initial_slope([4, 8, 15, 16], 1));
y2 = cell2mat(initial_slope([4, 8, 15, 16], 2));
y3 = cell2mat(initial_slope([4, 8, 15, 16], 3));
y4 = cell2mat(initial_slope([4, 8, 15, 16], 4));
[my_boxchart, x1, x2, x3, x4] = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'first', 'second', 'third', 'fourth', [], "Learning curve slope");
% plot([x1([4, 7, 11, 12])', x2([4, 7, 11, 12])', x3([4, 7, 11, 12])',x4([4, 7, 11, 12])']', [y1([4, 7, 11, 12]), y2([4, 7, 11, 12]), y3([4, 7, 11, 12]), y4([4, 7, 11, 12])]', 'b', LineWidth=2)
hold on
%%
close all
y1 = cell2mat(initial_slope([5, 18], 1));
y2 = cell2mat(initial_slope([2, 6, 9, 11, 17, 19], 1));
y3 = cell2mat(initial_slope([3, 14], 1));
y4 = cell2mat(initial_slope([4, 8,15, 16], 1));
my_boxchart = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'phase1', 'phase2', 'phase3', 'phase4', [], "Learning curve slope");

%%
% close all
figure
y1 = cell2mat(final_slope([5, 18], 1));
y2 = cell2mat(final_slope([2, 6, 9, 11, 17, 19], 1));
y3 = cell2mat(final_slope([3, 14], 1));
y4 = cell2mat(final_slope([4, 8, 15, 16], 1));
my_boxchart = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'phase1', 'phase2', 'phase3', 'phase4', [], "Learning curve slope");

%%
close all
figure
y1 = (difference_12([5, 18], 1));
y2 = (difference_12([2, 6, 9, 11, 17, 19], 1));
y3 = (difference_12([3, 14], 1));
y4 = (difference_12([4, 8,15, 16], 1));
my_boxchart = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'phase1', 'phase2', 'phase3', 'phase4', [], "difference12");

%%
close all
figure
y1 = (difference_23([5, 18], 1));
y2 = (difference_23([2, 6, 9, 11, 17, 19], 1));
y3 = (difference_23([3, 14], 1));
y4 = (difference_23([4, 8,15, 16], 1));
my_boxchart = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'phase1', 'phase2', 'phase3', 'phase4', [], "difference23");
%%
close all
figure
y1 = (difference_34([5, 18], 1));
y2 = (difference_34([2, 6, 9, 11, 17, 19], 1));
y3 = (difference_34([3, 14], 1));
y4 = (difference_34([4, 8,15, 16], 1));
my_boxchart = my_boxplot(y1, y2, y3, y4, ...
    55, 'Linux Libertine G', 9, 'phase1', 'phase2', 'phase3', 'phase4', [], "difference34");
%%
close all
baseline_test_window = 10;
max_correlation_mean = mean(max_correlation, 3);
max_correlation_mean_test = mean(max_correlation(:, :, end-baseline_test_window+1:end), 3);
max_correlation_mean_baseline = mean(max_correlation(:, :, 1:baseline_test_window), 3);
%%
y1 = max_correlation_mean(:, 1);
y2 = max_correlation_mean(:, 2);
y3 = max_correlation_mean(:, 3);
y4 = max_correlation_mean(:, 4);

close all
[my_boxchart, x1, x2, x3, x4] = box_plot_questionnaire(y1, y2, y3, y4, ...
    5, 'Linux Libertine G', 9, 'NHV', 'H', 'V', 'HV', [0, 1], "", "Maximum Correlation");

%%
close all

y1 = max_correlation_mean_baseline(:, 1);
y2 = max_correlation_mean_test(:, 1);
y3 = max_correlation_mean_baseline(:, 2);
y4 = max_correlation_mean_test(:, 2);
y5 = max_correlation_mean_baseline(:, 3);
y6 = max_correlation_mean_test(:, 3);
y7 = max_correlation_mean_baseline(:, 4);
y8 = max_correlation_mean_test(:, 4);

[my_boxchart, x1, x2, x3, x4, x5, x6, x7, x8] = ...
    emg_boxplot(y1, y2, y3, y4, y5, y6, y7, ...
    y8, 5, "linux libertine G", 9, "NHV", "H", ...
    "V", "HV", [0, 1.2], "", "Pearson Correlation");
StatisticalLines(x3, x4, "*", 1.1, 0.025, 9)
%%
[h, p] = ttest(y3, y4)
%%
[h, p] = ttest(y1, y8)

%%
close all
y1 = max_correlation_mean(:, 1);
y2 = max_correlation_mean(:, 2);
y3 = max_correlation_mean(:, 3);
y4 = max_correlation_mean(:, 4);
[my_boxchart, x1, x2, x3, x4] = box_plot_questionnaire(y1, y2, y3, y4, ...
    5, 'Linux Libertine G', 9, 'NHV', 'H', 'V', 'HV', [0, 1.2], "", "Pearson Correlation");

%%
[h, p] = ttest(y3, y4)

%% Zero-crossing plot
close all
zero_crossing = zero_crossing([1,2,3,4,5,6,8,9,11,14,15,16,17,18,19], :, :)
baseline_test_window = 10;
zero_crossing_mean = mean(zero_crossing, 3);
zero_crossing_mean_baseline = mean(zero_crossing(:, :, 1:baseline_test_window), 3);
zero_crossing_mean_test = mean(zero_crossing(:, :, end-baseline_test_window+1:end), 3);

%%
y1 = zero_crossing_mean(:, 1);
y2 = zero_crossing_mean(:, 2);
y3 = zero_crossing_mean(:, 3);
y4 = zero_crossing_mean(:, 4);

[my_boxchart, x1, x2, x3, x4] = box_plot_questionnaire(y1, y2, y3, y4, ...
    5, 'Linux Libertine G', 9, 'NHV', 'H', 'V', 'HV', [0, 5], "", "Zero crossing");

%%
close all

y1 = zero_crossing_mean_baseline(:, 1);
y2 = zero_crossing_mean_test(:, 1);
y3 = zero_crossing_mean_baseline(:, 2);
y4 = zero_crossing_mean_test(:, 2);
y5 = zero_crossing_mean_baseline(:, 3);
y6 = zero_crossing_mean_test(:, 3);
y7 = zero_crossing_mean_baseline(:, 4);
y8 = zero_crossing_mean_test(:, 4);

[my_boxchart, x1, x2, x3, x4, x5, x6, x7, x8] = ...
    emg_boxplot(y1, y2, y3, y4, y5, y6, y7, ...
    y8, 5, "linux libertine G", 9, "NHV", "H", ...
    "V", "HV", [0, 5], "", "Zero crossing");

%%
[h, p] = ttest(y1, y2)
% StatisticalLines(x3, x4, "*", 1.1, 0.025, 9)

%% trajectory smoothness plot

close all
smoothness = smooth_metric([1,2,3,4,5,6,8,9,11,14,15,16,17,18,19], :, :);
baseline_test_window = 10;
smoothness_mean = mean(smoothness, 3);
smoothness_mean_baseline = mean(smoothness(:, :, 1:baseline_test_window), 3);
smoothness_mean_test = mean(smoothness(:, :, end-baseline_test_window+1:end), 3);
%%

y1 = smoothness_mean_baseline(:, 1);
y2 = smoothness_mean_test(:, 1);
y3 = smoothness_mean_baseline(:, 2);
y4 = smoothness_mean_test(:, 2);
y5 = smoothness_mean_baseline(:, 3);
y6 = smoothness_mean_test(:, 3);
y7 = smoothness_mean_baseline(:, 4);
y8 = smoothness_mean_test(:, 4);

[my_boxchart, x1, x2, x3, x4, x5, x6, x7, x8] = ...
    emg_boxplot(y1, y2, y3, y4, y5, y6, y7, ...
    y8, 5, "linux libertine G", 9, "NHV", "H", ...
    "V", "HV", [-.1, .1], "", "Mean Smoothness");

%% Jerk smoothness
% close all
% smooth_jerk_metric = smooth_jerk_metric([1,2,3,4,5,6,8,9,11,14,15,16,17,18,19], :, :);
% baseline_test_window = 10;
% smooth_jerk_metric_mean = mean(smooth_jerk_metric, 3);
% smooth_jerk_metric_mean_baseline = mean(smooth_jerk_metric(:, :, 1:baseline_test_window), 3);
% smooth_jerk_metric_mean_test = mean(smooth_jerk_metric(:, :, end-baseline_test_window+1:end), 3);
% %%
% close all
% 
% y1 = smooth_jerk_metric_mean_baseline(:, 1);
% y2 = smooth_jerk_metric_mean_test(:, 1);
% y3 = smooth_jerk_metric_mean_baseline(:, 2);
% y4 = smooth_jerk_metric_mean_test(:, 2);
% y5 = smooth_jerk_metric_mean_baseline(:, 3);
% y6 = smooth_jerk_metric_mean_test(:, 3);
% y7 = smooth_jerk_metric_mean_baseline(:, 4);
% y8 = smooth_jerk_metric_mean_test(:, 4);
% 
% [my_boxchart, x1, x2, x3, x4, x5, x6, x7, x8] = ...
%     emg_boxplot(y1, y2, y3, y4, y5, y6, y7, ...
%     y8, 5, "linux libertine G", 9, "NHV", "H", ...
%     "V", "HV", [0, 1000], "", "Mean Smoothness");